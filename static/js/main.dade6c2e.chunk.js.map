{"version":3,"sources":["App.js","index.js"],"names":["SystemProgram","web3","arr","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","Keypair","fromSecretKey","programID","PublicKey","network","clusterApiUrl","opts","getProvider","connection","Connection","AnchorProvider","window","solana","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","connectWallet","createGifAccount","provider","getProgram","program","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","getGifList","sendGif","length","addGif","onInputChange","event","value","target","Program","fetchIdl","idl","account","fetch","useEffect","onLoad","addEventListener","removeEventListener","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAOQA,EAAkBC,IAAlBD,cAEFE,EAAMC,OAAOC,OAAOC,EAAGC,SAASC,WAChCC,EAAS,IAAIC,WAAWP,GACxBQ,EAAcT,IAAKU,QAAQC,cAAcJ,GAGzCK,EAAY,IAAIC,YAAU,gDAG1BC,EAAUC,wBAAc,UAGxBC,EACgB,YAGhBC,EAAc,WACnB,IAAMC,EAAa,IAAIC,aAAWL,EAASE,GAM3C,OALiB,IAAII,IACpBF,EACAG,OAAOC,OACPN,EAGF,EAwMeO,EAtMH,WACX,MAA0CC,mBAAS,MAAK,mBAAjDC,EAAa,KAAEC,EAAgB,KACtC,EAAoCF,mBAAS,IAAG,mBAAzCG,EAAU,KAAEC,EAAa,KAChC,EAA8BJ,mBAAS,IAAG,mBAAnCK,EAAO,KAAEC,EAAU,KAGpBC,EAAwB,iDAAG,qGAEtB,QAFsB,EAE5BV,cAAM,OAAQ,QAAR,EAAN,EAAQC,cAAM,QAAd,EAAgBU,UAAS,gBAE5B,OADAC,QAAQC,IAAI,yBACiC,EAA7C,OACuBb,OAAOC,OAAOa,QAAQ,CAAEC,eAAe,IAAQ,KAAD,EAA/DC,EAAQ,OACdJ,QAAQC,IAAI,6BAA8BG,EAASC,UAAUC,YAC7Db,EAAiBW,EAASC,UAAUC,YAAY,uBAEhDC,MAAM,8DAAoD,4CAE3D,kBAX6B,mCAaxBC,EAAa,iDAAG,kGACP,GADO,EACFpB,SAAXC,EAAM,EAANA,QAEG,CAAD,+BACcA,EAAOa,UAAU,KAAD,EAAjCE,EAAQ,OACdJ,QAAQC,IAAI,6BAA8BG,EAASC,UAAUC,YAC7Db,EAAiBW,EAASC,UAAUC,YAAY,2CAEjD,kBARkB,mCAUbG,EAAgB,iDAAG,gGAGO,OAF/BT,QAAQC,IAAI,SAAS,SAEdS,EAAW1B,IAAc,EAAD,OACR2B,IAAa,KAAD,EAEd,OAFdC,EAAO,OAEbZ,QAAQC,IAAI,QAAQ,SACdW,EAAQC,IAAIC,cAAc,CAC/BC,SAAU,CACTvC,YAAaA,EAAY6B,UACzBW,KAAMN,EAASO,OAAOZ,UACtBa,cAAepD,EAAcqD,WAE9BC,QAAS,CAAC5C,KACR,KAAD,EAIA,OAHFwB,QAAQC,IACP,wCACAzB,EAAY6B,UAAUC,YACrB,UACIe,IAAa,KAAD,qDAElBrB,QAAQC,IAAI,sCAAsC,EAAD,IAAS,0DAE3D,kBAvBqB,mCAyBhBqB,EAAO,iDAAG,mGACW,IAAtB5B,EAAW6B,OAAY,gBACQ,OAAlCvB,QAAQC,IAAI,sBAAsB,0BAMJ,OAH/BN,EAAc,IACdK,QAAQC,IAAI,YAAaP,GAAY,SAE9BgB,EAAW1B,IAAc,EAAD,OACR2B,IAAa,KAAD,EAArB,OAAPC,EAAO,iBAEPA,EAAQC,IAAIW,OAAO9B,EAAY,CACpCqB,SAAU,CACTvC,YAAaA,EAAY6B,UACzBW,KAAMN,EAASO,OAAOZ,aAErB,KAAD,GAC0D,OAA5DL,QAAQC,IAAI,mCAAoCP,GAAY,UAEtD2B,IAAa,KAAD,qDAElBrB,QAAQC,IAAI,qBAAqB,EAAD,IAAS,0DAE1C,kBAvBY,mCAyBPwB,EAAgB,SAACC,GACtB,IAAQC,EAAUD,EAAME,OAAhBD,MACRhC,EAAcgC,EACf,EA0DMhB,EAAU,iDAAG,8GAEAkB,IAAQC,SAASnD,EAAWK,KAAe,KAAD,EAAnD,OAAH+C,EAAG,yBAEF,IAAIF,IAAQE,EAAKpD,EAAWK,MAAc,2CACjD,kBALe,mCAQVqC,EAAU,iDAAG,yHAEKV,IAAa,KAAD,EAArB,OAAPC,EAAO,gBACSA,EAAQoB,QAAQxD,YAAYyD,MACjDzD,EAAY6B,WACX,KAAD,EAFK2B,EAAO,OAIbhC,QAAQC,IAAI,kBAAmB+B,GAC/BnC,EAAWmC,EAAQpC,SAAS,kDAE5BI,QAAQC,IAAI,wBAAwB,EAAD,IACnCJ,EAAW,MAAM,0DAElB,kBAbe,mCAiChB,OAjBAqC,qBAAU,WAEL1C,IACHQ,QAAQC,IAAI,wBACZoB,IAEF,GAAG,CAAC7B,IAEJ0C,qBAAU,WACT,IAAMC,EAAM,iDAAG,wGACRrC,IAA2B,KAAD,sCAChC,kBAFW,mCAKZ,OADAV,OAAOgD,iBAAiB,OAAQD,GACzB,kBAAM/C,OAAOiD,oBAAoB,OAAQF,EAAQ,CACzD,GAAG,IAGF,qBAAKG,UAAU,MAAK,SAEnB,qBAAKA,UAAW9C,EAAgB,mBAAqB,YAAY,SAChE,sBAAK8C,UAAU,mBAAkB,UAChC,mBAAGA,UAAU,SAAQ,6CACrB,mBAAGA,UAAU,WAAU,8BAErB9C,GAxGL,wBACC8C,UAAU,mCACVC,QAAS/B,EAAc,+BAuGpBhB,IA/FY,OAAZI,EAEF,qBAAK0C,UAAU,sBAAqB,SACnC,wBACCA,UAAU,+BACVC,QAAS9B,EAAiB,kEAU5B,sBAAK6B,UAAU,sBAAqB,UACnC,uBACCE,SAAU,SAACd,GACVA,EAAMe,iBACNnB,GACD,EAAE,UAEF,uBACCoB,KAAK,OACLC,YAAY,kBACZhB,MAAOjC,EACPkD,SAAUnB,IAEX,wBAAQiB,KAAK,SAASJ,UAAU,+BAA8B,uBAI/D,qBAAKA,UAAU,WAAU,SAEvB1C,EAAQiD,KAAI,SAACC,EAAMC,GAAK,OACxB,qBAAKT,UAAU,WAAU,SACxB,qBAAKU,IAAKF,EAAKG,QAASC,IAAI,SADEH,EAEzB,gBAgEb,ECjOAI,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,MAENC,SAASC,eAAe,Q","file":"static/js/main.dade6c2e.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, AnchorProvider, web3 } from \"@project-serum/anchor\";\nimport kp from \"./keypair.json\";\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram } = web3;\n\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n\n// This is the address of your solana program, if you forgot, just run solana address -k target/deploy/myepicproject-keypair.json\nconst programID = new PublicKey(\"3qbP7m8xbYkYzm6avvS2RMo3DiLz2rvvZ1HjxunPS3XJ\");\n\n// Set our network to devnet.\nconst network = clusterApiUrl(\"devnet\");\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n\tpreflightCommitment: \"processed\",\n};\n\nconst getProvider = () => {\n\tconst connection = new Connection(network, opts.preflightCommitment);\n\tconst provider = new AnchorProvider(\n\t\tconnection,\n\t\twindow.solana,\n\t\topts.preflightCommitment\n\t);\n\treturn provider;\n};\n\nconst App = () => {\n\tconst [walletAddress, setWalletAddress] = useState(null);\n\tconst [inputValue, setInputValue] = useState(\"\");\n\tconst [gifList, setGifList] = useState([]);\n\n\t// is phantom wallet connected?\n\tconst checkIfWalletIsConnected = async () => {\n\t\t// Using optional chaining (question mark) to check if the object is null\n\t\tif (window?.solana?.isPhantom) {\n\t\t\tconsole.log(\"Phantom wallet found!\");\n\t\t\t/* Connect directly with the user's wallet */\n\t\t\tconst response = await window.solana.connect({ onlyIfTrusted: true });\n\t\t\tconsole.log(\"Connected with Public Key:\", response.publicKey.toString());\n\t\t\tsetWalletAddress(response.publicKey.toString());\n\t\t} else {\n\t\t\talert(\"Solana object not found! Get a Phantom Wallet ðŸ‘»\");\n\t\t}\n\t};\n\n\tconst connectWallet = async () => {\n\t\tconst { solana } = window;\n\n\t\tif (solana) {\n\t\t\tconst response = await solana.connect();\n\t\t\tconsole.log(\"Connected with Public Key:\", response.publicKey.toString());\n\t\t\tsetWalletAddress(response.publicKey.toString());\n\t\t}\n\t};\n\n\tconst createGifAccount = async () => {\n\t\tconsole.log(\"click\");\n\t\ttry {\n\t\t\tconst provider = getProvider();\n\t\t\tconst program = await getProgram();\n\n\t\t\tconsole.log(\"ping\");\n\t\t\tawait program.rpc.startStuffOff({\n\t\t\t\taccounts: {\n\t\t\t\t\tbaseAccount: baseAccount.publicKey,\n\t\t\t\t\tuser: provider.wallet.publicKey,\n\t\t\t\t\tsystemProgram: SystemProgram.programId,\n\t\t\t\t},\n\t\t\t\tsigners: [baseAccount],\n\t\t\t});\n\t\t\tconsole.log(\n\t\t\t\t\"Created a new BaseAccount w/ address:\",\n\t\t\t\tbaseAccount.publicKey.toString()\n\t\t\t);\n\t\t\tawait getGifList();\n\t\t} catch (error) {\n\t\t\tconsole.log(\"Error creating BaseAccount account:\", error);\n\t\t}\n\t};\n\n\tconst sendGif = async () => {\n\t\tif (inputValue.length === 0) {\n\t\t\tconsole.log(\"No gif link given!\");\n\t\t\treturn;\n\t\t}\n\t\tsetInputValue(\"\");\n\t\tconsole.log(\"Gif link:\", inputValue);\n\t\ttry {\n\t\t\tconst provider = getProvider();\n\t\t\tconst program = await getProgram();\n\n\t\t\tawait program.rpc.addGif(inputValue, {\n\t\t\t\taccounts: {\n\t\t\t\t\tbaseAccount: baseAccount.publicKey,\n\t\t\t\t\tuser: provider.wallet.publicKey,\n\t\t\t\t},\n\t\t\t});\n\t\t\tconsole.log(\"GIF successfully sent to program\", inputValue);\n\n\t\t\tawait getGifList();\n\t\t} catch (error) {\n\t\t\tconsole.log(\"Error sending GIF:\", error);\n\t\t}\n\t};\n\n\tconst onInputChange = (event) => {\n\t\tconst { value } = event.target;\n\t\tsetInputValue(value);\n\t};\n\n\tconst renderNotConnectedContainer = () => (\n\t\t<button\n\t\t\tclassName='cta-button connect-wallet-button'\n\t\t\tonClick={connectWallet}\n\t\t>\n\t\t\tConnect to Wallet\n\t\t</button>\n\t);\n\n\tconst renderConnectedContainer = () => {\n\t\t// If we hit this, it means the program account hasn't been initialized.\n\t\tif (gifList === null) {\n\t\t\treturn (\n\t\t\t\t<div className='connected-container'>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName='cta-button submit-gif-button'\n\t\t\t\t\t\tonClick={createGifAccount}\n\t\t\t\t\t>\n\t\t\t\t\t\tDo One-Time Initialization For GIF Program Account\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\t// Otherwise, we're good! Account exists. User can submit GIFs.\n\t\telse {\n\t\t\treturn (\n\t\t\t\t<div className='connected-container'>\n\t\t\t\t\t<form\n\t\t\t\t\t\tonSubmit={(event) => {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tsendGif();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\tplaceholder='Enter gif link!'\n\t\t\t\t\t\t\tvalue={inputValue}\n\t\t\t\t\t\t\tonChange={onInputChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button type='submit' className='cta-button submit-gif-button'>\n\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</form>\n\t\t\t\t\t<div className='gif-grid'>\n\t\t\t\t\t\t{/* We use index as the key instead, also, the src is now item.gifLink */}\n\t\t\t\t\t\t{gifList.map((item, index) => (\n\t\t\t\t\t\t\t<div className='gif-item' key={index}>\n\t\t\t\t\t\t\t\t<img src={item.gifLink} alt=\"gif\"/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t};\n\n\tconst getProgram = async () => {\n\t\t// Get metadata about your solana program\n\t\tconst idl = await Program.fetchIdl(programID, getProvider());\n\t\t// Create a program that you can call\n\t\treturn new Program(idl, programID, getProvider());\n\t};\n\n\n\tconst getGifList = async () => {\n\t\ttry {\n\t\t\tconst program = await getProgram();\n\t\t\tconst account = await program.account.baseAccount.fetch(\n\t\t\t\tbaseAccount.publicKey\n\t\t\t);\n\n\t\t\tconsole.log(\"Got the account\", account);\n\t\t\tsetGifList(account.gifList);\n\t\t} catch (error) {\n\t\t\tconsole.log(\"Error in getGifList: \", error);\n\t\t\tsetGifList(null);\n\t\t}\n\t};\n\n\n\tuseEffect(() => {\n\n\t\tif (walletAddress) {\n\t\t\tconsole.log(\"Fetching GIF list...\");\n\t\t\tgetGifList();\n\t\t}\n\t}, [walletAddress]); /* eslint-disable-line */\n\n\tuseEffect(() => {\n\t\tconst onLoad = async () => {\n\t\t\tawait checkIfWalletIsConnected();\n\t\t};\n\n\t\twindow.addEventListener(\"load\", onLoad);\n\t\treturn () => window.removeEventListener(\"load\", onLoad);\n\t}, []);\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t{/* This was solely added for some styling fanciness */}\n\t\t\t<div className={walletAddress ? \"authed-container\" : \"container\"}>\n\t\t\t\t<div className='header-container'>\n\t\t\t\t\t<p className='header'> Solana Blockchain Dance Party </p>\n\t\t\t\t\t<p className='sub-text'>You're invited!</p>\n\t\t\t\t\t{/* Add the condition to show this only if we don't have a wallet address */}\n\t\t\t\t\t{!walletAddress && renderNotConnectedContainer()}\n\t\t\t\t\t{walletAddress && renderConnectedContainer()}\n\t\t\t\t</div>\n\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}